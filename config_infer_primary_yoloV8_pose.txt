[property]
gpu-id=0

# 1/255
net-scale-factor=0.0039215697906911373
model-color-format=0

# 先用 ONNX 讓 DeepStream 自動重建 engine
onnx-file=/apps/model/yolov8s-pose.onnx
# 先註解或刪除舊 engine，避免拿到不同驅動/不同 shape 的舊快取
# model-engine-file=/apps/model/yolov8s-pose.onnx_b1_gpu0_fp32.engine
model-engine-file=/apps/model/yolov8s-pose.onnx_b1_gpu0_fp16.engine
labelfile-path=/apps/labels.txt
batch-size=1

# FP16 較穩且快（要 FP32 改回 0）
network-mode=2

# 人類：1 類
num-detected-classes=1
interval=0
gie-unique-id=1
process-mode=1                 # primary

# 目前使用 "instance mask + pose 解析" 路線，維持 network-type=3
# （若未來改走「det 當 pgie、pose 當 sgie」再把這個改成 0）
network-type=3                 # 3 = instance-seg / mask 輸出

# DeepStream 期待固定輸入尺寸，與 streammux（640x640）對齊
infer-dims=3;640;640

# Ultralytics ONNX 常見輸入名
input-blob-name=images

# YOLO 的 cluster（NMS）
cluster-mode=4
maintain-aspect-ratio=1
symmetric-padding=1

# 自訂 pose 解析器（會回傳 bbox + instance mask 承載 keypoints）
parse-bbox-instance-mask-func-name=NvDsInferParseYoloPose
custom-lib-path=/apps/nvdsinfer_custom_impl_Yolo_pose/libnvdsinfer_custom_impl_Yolo_pose.so

# 讓 keypoints 跟著 mask 出來（pad-probe 用 obj_meta.mask_params 解析）
output-instance-mask=1

# （可選）同時輸出 tensor 方便 debug：若需要再開
# output-tensor-meta=1

# （可選）若 ONNX 沒包含 NMS，或想手動控制，再加 topk/nms 門檻
[class-attrs-all]
pre-cluster-threshold=0.25
nms-iou-threshold=0.45
topk=300
